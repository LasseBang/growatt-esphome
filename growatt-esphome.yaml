substitutions:
  esphome_project_name: "LasseBang.GrowattControl"
  esphome_project_version: "1.0.7"

  name: "growatt-esphome"
  device_name: "Growatt" 
  device_description: "Growatt - ESPhome controller"
  modbus_controller_id: growatt
  modbus_update_interval: "15s" 
  skip_updates_slow: "10"
  update_fast: "5s"
  update_slow: "60s"

dashboard_import:
  package_import_url: github://LasseBang/growatt-esphome/growatt-esphome.yaml@main
  import_full_config: true

esphome:
  name: ${name}
  name_add_mac_suffix: False
  project:
      name: $esphome_project_name
      version: $esphome_project_version

  on_boot: 
    - priority: 600
      then: 
      - output.turn_on: pin16_high
      - output.turn_on: pin17_high
      - output.turn_on: pin19_high

esp32:
  board: esp32dev

output:
  - platform: gpio
    pin: 16
    id: pin16_high
    
  - platform: gpio
    pin: 17
    id: pin17_high
    
  - platform: gpio
    pin: 19
    id: pin19_high 

logger:

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${name}
    
captive_portal:

improv_serial:

web_server:
  port: 80

uart:
  id: mod_bus
  rx_pin: 21
  tx_pin: 22
  baud_rate: 9600
  stop_bits: 1
 
modbus:
  id: modbus1

 
modbus_controller:
  - id: ${modbus_controller_id}
    address: 0x1
    modbus_id: modbus1
    setup_priority: -10
    update_interval: ${modbus_update_interval}


text_sensor:
  - platform: template
    name: "${device_name} Status state"
    icon: mdi:eye
    entity_category: diagnostic
    lambda: |-
      if ((id(status).state) == 1) {
        return {"Normal"};
      } else if ((id(status).state) == 0)  {
        return {"Standby"};
      } else if ((id(status).state) == 2)  {
        return {"Discharge"};
      } else if ((id(status).state) == 3)  {
        return {"Fault"};
      } else if ((id(status).state) == 4)  {
        return {"Flash"};
      } else if ((id(status).state) == 5)  {
        return {"PV Charging"};
      } else if ((id(status).state) == 6)  {
        return {"AC Charging"};
      } else if ((id(status).state) == 7)  {
        return {"Combined Charging"};
      } else if ((id(status).state) == 8)  {
        return {"Combined Charging & Bypass"};
      } else if ((id(status).state) == 9)  {
        return {"PV Charging & Bypass"};
      } else if ((id(status).state) == 10)  {
        return {"AC Charging & Bypass"};
      } else if ((id(status).state) == 11)  {
        return {"Bypass"};
      } else if (id(status).state == 12)  {
        return {"PV Charge and Discharge"};
      } else {
        return {"Unknown"};
      }

  - platform: modbus_controller
    name: "${device_name} Inverter SN"
    icon: "mdi:information"
    register_type: "holding"
    address: 23
    register_count: 5
    response_size: 10
    skip_updates: 100

  - platform: modbus_controller
    name: "${device_name} Fault code"
    skip_updates: $skip_updates_slow
    address: 105
    register_type: "read"
    icon: mdi:eye
    entity_category: diagnostic
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0:  return std::string("No error");
        case 24: return std::string("Auto test failed");
        case 25: return std::string("No AC connection");
        case 26: return std::string("PV isolation low");
        case 27: return std::string("Residual I high");
        case 28: return std::string("Output high DCI");
        case 29: return std::string("PV voltage high");
        case 30: return std::string("AC voltage out of range");
        case 31: return std::string("AC frequency out of range");
        case 32: return std::string("Module too hot");
        // case 1~23 " Error: 99+x
        default: return std::string("Fault code: " + to_string(value));
      }
      return x;
select:
  - platform: modbus_controller
    name: "${device_name} Allow AC Charging"
    icon: mdi:battery-charging-100
    address: 1092
    value_type: U_WORD
    optionsmap:
      "Off": 0
      "On": 1


switch:
  - platform: restart
    name: "ESP Restart"   

  - platform: modbus_controller 
    name: "${device_name} Inverter On/Off"
    use_write_multiple: true
    register_type: holding
    address: 0
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller
    name: "${device_name} Enable Export Limit"
    register_type: holding
    address: 122
    bitmask: 1
    icon: "mdi:toggle-switch"

    # Write default time 00:00 - 23:59 to Battery First Time slot 1 and enable it      
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "${device_name} Enable Batt First - Time 1"
    id: "battfirst_time1_switch"
    register_type: holding
    address: 1102
    bitmask: 1
    icon: "mdi:toggle-switch"
    lambda: |-
      if (id(gridfirst_time1_switch).state) {
            esphome::modbus_controller::ModbusController *controller = id(${modbus_controller_id});
            std::vector<uint16_t> batt_data = {0, 5947, 1};
            esphome::modbus_controller::ModbusCommandItem set_batt_command = 
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 1100, batt_data.size(), batt_data);
            controller->queue_command(set_batt_command);
            ESP_LOGI("ModbusLambda", "Batt Time 1 Write");    
      }    

      return{}; 
      
# Write default time 00:00 - 23:59 to Grid First Time slot 1 and enable it      
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "${device_name} Enable Grid First - Time 1"
    id: "gridfirst_time1_switch"
    register_type: holding
    address: 1082
    bitmask: 1
    icon: "mdi:toggle-switch"
    lambda: |-
      if (id(gridfirst_time1_switch).state) {
            esphome::modbus_controller::ModbusController *controller = id(${modbus_controller_id});
            std::vector<uint16_t> grid_data = {0, 5947, 1};
            esphome::modbus_controller::ModbusCommandItem set_grid_command = 
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 1080, grid_data.size(), grid_data);
            controller->queue_command(set_grid_command);
            ESP_LOGI("ModbusLambda", "Grid Time 1 Write");    
      }    

      return{};

sensor:
  - platform: modbus_controller
    name: "${device_name} inverter status code"
    skip_updates: $skip_updates_slow
    address: 0
    register_type: "read"
    internal: true
    accuracy_decimals: 0
    id: status

#######################
# MPPT Data
#######################

  - platform: modbus_controller
    name: "${device_name} PV1 voltage"
    address: 3
    register_type: "read"
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    name: "${device_name} PV1 current"
    address: 4
    register_type: "read"
    unit_of_measurement: A
    device_class: current
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    name: "${device_name} PV1 power"
    id: pv1_power
    address: 5
    register_type: "read"
    unit_of_measurement: W
    device_class: power
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    name: "${device_name} PV2 voltage"
    address: 7
    register_type: "read"
    unit_of_measurement: V
    device_class: voltage
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1
    
  - platform: modbus_controller
    name: "${device_name} PV2 current"
    address: 8
    register_type: "read"
    unit_of_measurement: A
    device_class: current
    icon: mdi:flash
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    name: "${device_name} PV2 power"
    id: pv2_power
    address: 9
    register_type: "read"
    unit_of_measurement: W
    device_class: power
    icon: mdi:flash
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1

  - platform: template
    id: pv_power
    name: "${device_name} Combined PV Power"
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    icon: mdi:solar-power-variant
    accuracy_decimals: 0
    lambda: |-
      return float((id(pv1_power).state + id(pv2_power).state));
    update_interval: ${update_fast}

#######################
# INVERTER Data
#######################

  - platform: modbus_controller
    name: "${device_name} Inverter temperature"
    address: 93
    register_type: "read"
    unit_of_measurement: °C
    device_class: temperature
    entity_category: diagnostic
    icon: mdi:thermometer
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
    skip_updates: $skip_updates_slow

  - platform: modbus_controller
    name: "${device_name} Battery charged today"
    address: 1056
    register_type: "read"
    unit_of_measurement: kWh
    device_class: energy
    icon: mdi:home-battery
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    name: "${device_name} Battery SOC"
    skip_updates: $skip_updates_slow
    address: 1014
    register_type: "read"
    unit_of_measurement: " %"
    state_class: measurement
    device_class: battery
    icon: mdi:home-battery
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    name: "${device_name} Battery Discharging Power"
    id: "battery_discharging"
    address: 1009
    register_type: "read"
    unit_of_measurement: W
    device_class: power
    icon: mdi:battery-arrow-down
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1       

  - platform: modbus_controller
    name: "${device_name} Battery Charging Power"
    id: "battery_charging"
    address: 1011
    register_type: "read"
    unit_of_measurement: W
    device_class: power
    icon: mdi:battery-arrow-up-outline
    value_type: U_DWORD
    accuracy_decimals: 0
    filters:
    - multiply: 0.1

  - platform: template
    id: battery_power
    name: "${device_name} battery combined power"
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    lambda: |-
      return ((id(battery_charging).state - id(battery_discharging).state));
    update_interval: ${update_fast}    
  
#######################
# LIFETIME Data
#######################    

  - platform: modbus_controller
    name: "${device_name} Lifetime Energy total"
    skip_updates: $skip_updates_slow
    address: 55
    register_type: "read"
    unit_of_measurement: kWh
    state_class: total_increasing
    device_class: energy
    icon: mdi:solar-power
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1

  - platform: modbus_controller
    name: "${device_name} Lifetime solar energy"
    address: 91
    register_type: "read"
    unit_of_measurement: kWh
    state_class: total_increasing
    device_class: energy
    icon: mdi:solar-power-variant
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
    - multiply: 0.1
  